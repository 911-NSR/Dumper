name: ROM DumperX Extractor

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'Direct download link for ROM (.zip, .tgz, etc.) or supported website'
        required: true
      ROM_TYPE:
        description: 'ROM name (MIUI, HyperOS, LineageOS, etc.)'
        required: true
      TARGET_PATH:
        description: 'Optional folder or file to extract inside the ROM output (ignored if PARTITION_NAME is set)'
        default: ''
      PARTITION_NAME:
        description: 'Optional specific partition to extract (system, vendor, boot, etc.)'
        default: ''

jobs:
  dump:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y git unzip zip p7zip-full aria2 lz4 brotli python3 python3-pip
          pip install tqdm rich
          echo "‚úÖ Environment ready"

      - name: Clone DumprX
        run: |
          git clone --depth=1 https://github.com/DumprX/DumprX.git dumprx
          cd dumprx
          chmod +x setup.sh dumper.sh
          echo "‚úÖ DumprX cloned"

      - name: Run DumprX setup
        run: |
          cd dumprx
          ./setup.sh || true
          echo "‚úÖ DumprX setup complete (safe mode)"

      - name: Download ROM inside DumprX
        run: |
          cd dumprx
          echo "üì• Downloading ROM from ${{ inputs.ROM_URL }}"
          aria2c -x16 -s16 -k1M "${{ inputs.ROM_URL }}" -o rom.zip
          ls -lh rom.zip

      - name: Extract ROM with DumprX
        id: extract_rom
        run: |
          cd dumprx
          export TERM=xterm-256color
          echo "‚öôÔ∏è Extracting ROM (rootless safe mode)..."
          bash dumper.sh "rom.zip" && echo "success" > ../extract_status.txt || echo "fail" > ../extract_status.txt
          echo "‚úÖ Extraction process finished"

      - name: Post-extraction logic
        run: |
          STATUS=$(cat extract_status.txt || echo "fail")
          if [ "$STATUS" = "success" ] && [ -d "dumprx/out" ]; then
            echo "‚úÖ Dump succeeded. Cleaning up rom.zip..."
            rm -f dumprx/rom.zip || true
          else
            echo "‚ùå Extraction failed or output not found. Keeping rom.zip for debugging."
            exit 1
          fi

      - name: Handle output
        run: |
          OUTPUT=dumprx/out
          cd "$OUTPUT" || exit 1

          mkdir -p ../../final_zips

          # Priority: PARTITION_NAME > TARGET_PATH > full dump
          if [ -n "${{ inputs.PARTITION_NAME }}" ]; then
            PART="${{ inputs.PARTITION_NAME }}"
            echo "üß© Extracting specific partition: $PART"

            FOUND=$(find . -type f -iname "${PART}.*" | head -n1)
            if [ -n "$FOUND" ]; then
              ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_${PART}_partition.zip"
              zip -r -9 "$ZIP_NAME" "$FOUND"
              echo "‚úÖ Zipped partition: $ZIP_NAME"
            else
              echo "‚ùå Partition not found: $PART"
              exit 1
            fi

          elif [ -n "${{ inputs.TARGET_PATH }}" ]; then
            TARGET="${{ inputs.TARGET_PATH }}"
            echo "üéØ Extracting specific path: $TARGET"

            if [ -e "$TARGET" ]; then
              ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_${TARGET//\//_}.zip"
              zip -r -9 "$ZIP_NAME" "$TARGET"
              echo "‚úÖ Zipped folder/file: $ZIP_NAME"
            else
              echo "‚ùå Path not found: $TARGET"
              exit 1
            fi

          else
            ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_full_dump.zip"
            zip -r -9 "$ZIP_NAME" ./*
            echo "‚úÖ Zipped full ROM dump: $ZIP_NAME"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.ROM_TYPE }}-ROM-Dump
          path: final_zips/*.zip
          retention-days: 7
          
