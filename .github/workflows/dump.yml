name: ROM DumperX Extractor

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'Direct download link for ROM (.zip, .tgz, etc.) or supported website'
        required: true
      ROM_TYPE:
        description: 'ROM name (MIUI, HyperOS, LineageOS, etc.)'
        required: true
      TARGET_PATH:
        description: 'Optional folder or file to extract inside the ROM output (ignored if PARTITION_NAME is set)'
        default: ''
      PARTITION_NAME:
        description: 'Optional specific partition directory to extract (system, vendor, product, etc.)'
        default: ''

jobs:
  dump:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          echo -e "\e[1;34m[SETUP]\e[0m Updating environment..."
          sudo apt-get update
          sudo apt-get install -y git unzip zip p7zip-full aria2 lz4 brotli python3 python3-pip
          pip install tqdm rich
          echo -e "\e[1;32m[OK]\e[0m Environment ready ‚úÖ"

      - name: Clone DumprX
        run: |
          echo -e "\e[1;34m[CLONE]\e[0m Cloning DumprX..."
          git clone --depth=1 https://github.com/DumprX/DumprX.git dumprx
          cd dumprx
          chmod +x setup.sh dumper.sh
          echo -e "\e[1;32m[OK]\e[0m DumprX cloned ‚úÖ"

      - name: Run DumprX setup
        run: |
          cd dumprx
          ./setup.sh || true
          echo -e "\e[1;32m[OK]\e[0m DumprX setup complete (safe mode) ‚úÖ"

      - name: Download ROM inside DumprX
        run: |
          cd dumprx
          echo -e "\e[1;34m[DOWNLOAD]\e[0m Fetching ROM from: \e[1;36m${{ inputs.ROM_URL }}\e[0m"
          aria2c -x16 -s16 -k1M "${{ inputs.ROM_URL }}" -o rom.zip
          
          # Auto-detect TGZ/TAR format
          if [[ "${{ inputs.ROM_URL }}" == *.tgz || "${{ inputs.ROM_URL }}" == *.tar.gz ]]; then
            mv rom.zip rom.tgz
            echo -e "\e[1;33m[INFO]\e[0m Detected TGZ ROM format, renamed to rom.tgz"
          fi

          ls -lh rom.*

      - name: Extract ROM with DumprX
        id: extract_rom
        run: |
          cd dumprx
          export TERM=xterm-256color
          echo -e "\e[1;34m[EXTRACT]\e[0m Running DumprX extractor..."
          
          bash dumper.sh "rom.zip" || bash dumper.sh "rom.tgz" || echo "fail" > ../extract_status.txt
          if [ -d "out" ]; then
            echo "success" > ../extract_status.txt
          fi

          echo -e "\e[1;32m[OK]\e[0m Extraction process finished ‚úÖ"

      - name: Post-extraction logic
        run: |
          STATUS=$(cat extract_status.txt || echo "fail")
          if [ "$STATUS" = "success" ] && [ -d "dumprx/out" ]; then
            echo -e "\e[1;32m[SUCCESS]\e[0m Dump succeeded. Cleaning up rom.zip..."
            rm -f dumprx/rom.zip dumprx/rom.tgz || true
          else
            echo -e "\e[1;31m[ERROR]\e[0m Extraction failed or output not found. Keeping rom.zip for debugging."
            exit 1
          fi

      - name: Handle output
        run: |
          OUTPUT=dumprx/out
          cd "$OUTPUT" || exit 1
          mkdir -p ../../final_zips

          # Priority: PARTITION_NAME > TARGET_PATH > full dump
          if [ -n "${{ inputs.PARTITION_NAME }}" ]; then
            PART="${{ inputs.PARTITION_NAME }}"
            echo -e "\e[1;34m[SEARCH]\e[0m Looking for partition directory: \e[1;36m$PART\e[0m"

            # Search only for directories
            FOUND_PATH=$(find . -type d -iname "$PART" | head -n1)

            if [ -n "$FOUND_PATH" ]; then
              ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_${PART}_partition.zip"
              echo -e "\e[1;32m[FOUND]\e[0m Found directory: $FOUND_PATH"
              zip -r -9 "$ZIP_NAME" "$FOUND_PATH"
              echo -e "\e[1;32m[OK]\e[0m Zipped partition directory: $ZIP_NAME ‚úÖ"
            else
              echo -e "\e[1;31m[ERROR]\e[0m Partition directory not found: $PART"
              echo "üìÅ Available directories:"
              find . -maxdepth 3 -type d
              exit 1
            fi

          elif [ -n "${{ inputs.TARGET_PATH }}" ]; then
            TARGET="${{ inputs.TARGET_PATH }}"
            echo -e "\e[1;34m[TARGET]\e[0m Extracting specific path: \e[1;36m$TARGET\e[0m"

            if [ -e "$TARGET" ]; then
              ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_${TARGET//\//_}.zip"
              zip -r -9 "$ZIP_NAME" "$TARGET"
              echo -e "\e[1;32m[OK]\e[0m Zipped folder/file: $ZIP_NAME ‚úÖ"
            else
              echo -e "\e[1;31m[ERROR]\e[0m Path not found: $TARGET"
              exit 1
            fi

          else
            ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_full_dump.zip"
            echo -e "\e[1;34m[ZIP]\e[0m Creating full dump zip..."
            zip -r -9 "$ZIP_NAME" ./*
            echo -e "\e[1;32m[OK]\e[0m Zipped full ROM dump: $ZIP_NAME ‚úÖ"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.ROM_TYPE }}-ROM-Dump
          path: final_zips/*.zip
          retention-days: 7

      - name: Cleanup workspace
        if: always()
        run: |
          echo -e "\e[1;34m[CLEANUP]\e[0m Removing temporary files..."
          rm -rf dumprx extract_status.txt final_zips || true
          echo -e "\e[1;32m[OK]\e[0m Cleanup complete ‚úÖ"
          
