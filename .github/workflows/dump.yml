name: ROM DumperX Extractor v2.1

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'Direct ROM link (.zip, .tgz, .tar.gz, .7z, etc.) or supported site (AFH, SourceForge)'
        required: true
      ROM_TYPE:
        description: 'ROM name (MIUI, HyperOS, LineageOS, etc.)'
        required: true
      PARTITION_NAME:
        description: 'Optional: Name of partition directory to extract (directory-only)'
        default: ''
      TARGET_PATH:
        description: 'Optional: Extract specific file/folder (ignored if PARTITION_NAME is set)'
        default: ''

jobs:
  dump:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          echo -e "\e[1;34m[SETUP]\e[0m Installing dependencies..."
          sudo apt-get update -y
          sudo apt-get install -y git unzip zip p7zip-full aria2 lz4 brotli tar file jq curl
          pip3 install tqdm rich >/dev/null 2>&1 || true
          echo -e "\e[1;32m[OK]\e[0m Dependencies installed ✅"

      - name: Clone DumprX
        run: |
          echo -e "\e[1;34m[CLONE]\e[0m Cloning DumprX..."
          rm -rf dumprx || true
          git clone --depth=1 https://github.com/DumprX/DumprX.git dumprx
          cd dumprx
          chmod +x setup.sh dumper.sh
          echo -e "\e[1;32m[OK]\e[0m DumprX cloned ✅"

      - name: Run DumprX setup
        run: |
          cd dumprx
          ./setup.sh || true
          echo -e "\e[1;32m[OK]\e[0m DumprX setup done ✅"

      - name: Smart ROM Download
        run: |
          mkdir -p dumprx/tmp
          cd dumprx/tmp
          echo -e "\e[1;34m[DOWNLOAD]\e[0m Starting download from: \e[1;36m${{ inputs.ROM_URL }}\e[0m"

          # Try aria2 first
          aria2c -x16 -s16 -k1M -o rom.download "${{ inputs.ROM_URL }}" || true

          # Check if file downloaded properly
          if [ ! -s rom.download ]; then
            echo -e "\e[1;33m[WARN]\e[0m aria2c failed, retrying with curl..."
            curl -L --retry 5 --retry-delay 5 -o rom.download "${{ inputs.ROM_URL }}" || true
          fi

          # Final check
          if [ ! -s rom.download ]; then
            echo -e "\e[1;31m[ERROR]\e[0m Failed to download ROM from provided URL."
            exit 1
          fi

          # Detect final MIME type
          FILE_TYPE=$(file --brief --mime-type rom.download)
          echo -e "\e[1;34m[INFO]\e[0m Detected file type: $FILE_TYPE"

          case "$FILE_TYPE" in
            application/x-gzip|application/gzip)
              mv rom.download rom.tgz;;
            application/x-tar)
              mv rom.download rom.tar;;
            application/zip|application/x-zip|application/x-zip-compressed)
              mv rom.download rom.zip;;
            application/x-7z-compressed)
              mv rom.download rom.7z;;
            *)
              echo -e "\e[1;33m[WARN]\e[0m Unknown file type, defaulting to rom.zip"
              mv rom.download rom.zip;;
          esac

          echo -e "\e[1;32m[OK]\e[0m ROM downloaded successfully ✅"
          ls -lh

      - name: Extract ROM with DumprX
        id: extract_rom
        run: |
          cd dumprx
          export TERM=xterm-256color
          echo -e "\e[1;34m[EXTRACT]\e[0m Running DumprX extractor..."

          if [ -f tmp/rom.zip ]; then
            bash dumper.sh "tmp/rom.zip" || true
          elif [ -f tmp/rom.tgz ]; then
            bash dumper.sh "tmp/rom.tgz" || true
          elif [ -f tmp/rom.7z ]; then
            bash dumper.sh "tmp/rom.7z" || true
          elif [ -f tmp/rom.tar ]; then
            bash dumper.sh "tmp/rom.tar" || true
          fi

          if [ -d "out" ]; then
            echo "success" > ../extract_status.txt
            echo -e "\e[1;32m[OK]\e[0m Extraction succeeded ✅"
          else
            echo "fail" > ../extract_status.txt
            echo -e "\e[1;31m[ERROR]\e[0m Extraction failed ❌"
            exit 1
          fi

      - name: Handle output (partition / target / full)
        run: |
          OUTPUT=dumprx/out
          cd "$OUTPUT" || { echo "dumprx/out not found"; exit 1; }
          mkdir -p ../../final_zips

          if [ -n "${{ inputs.PARTITION_NAME }}" ]; then
            PART="${{ inputs.PARTITION_NAME }}"
            echo -e "\e[1;34m[SEARCH]\e[0m Looking for partition directory: $PART"
            FOUND_PATH=$(find . -type d -iname "$PART" | head -n1)
            if [ -n "$FOUND_PATH" ]; then
              ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_${PART}_partition.zip"
              echo -e "\e[1;32m[FOUND]\e[0m Found directory: $FOUND_PATH"
              zip -r -9 "$ZIP_NAME" "$FOUND_PATH"
              echo -e "\e[1;32m[OK]\e[0m Zipped partition: $ZIP_NAME ✅"
            else
              echo -e "\e[1;31m[ERROR]\e[0m No partition directory named $PART found."
              find . -maxdepth 3 -type d
              exit 1
            fi

          elif [ -n "${{ inputs.TARGET_PATH }}" ]; then
            TARGET="${{ inputs.TARGET_PATH }}"
            echo -e "\e[1;34m[TARGET]\e[0m Extracting: $TARGET"
            if [ -e "$TARGET" ]; then
              SAFE_NAME="${TARGET//\//_}"
              ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_${SAFE_NAME}.zip"
              zip -r -9 "$ZIP_NAME" "$TARGET"
              echo -e "\e[1;32m[OK]\e[0m Zipped: $ZIP_NAME ✅"
            else
              echo -e "\e[1;31m[ERROR]\e[0m Path not found: $TARGET"
              exit 1
            fi

          else
            ZIP_NAME="../../final_zips/${{ inputs.ROM_TYPE }}_full_dump.zip"
            echo -e "\e[1;34m[ZIP]\e[0m Creating full ROM dump..."
            zip -r -9 "$ZIP_NAME" ./*
            echo -e "\e[1;32m[OK]\e[0m Full ROM dump ready: $ZIP_NAME ✅"
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.ROM_TYPE }}-ROM-Dump
          path: final_zips/*.zip
          retention-days: 7

      - name: Cleanup workspace
        if: always()
        run: |
          echo -e "\e[1;34m[CLEANUP]\e[0m Cleaning temporary files..."
          rm -rf dumprx/tmp dumprx/rom* dumprx/out extract_status.txt || true
          echo -e "\e[1;32m[OK]\e[0m Cleanup complete ✅"
          
