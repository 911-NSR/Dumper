name: Universal ROM Dumper (with Deep Folder Extraction)

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'Direct download link to ROM (.zip, .tgz, .7z, etc.)'
        required: true
      ROM_TYPE:
        description: 'ROM type name (e.g. MIUI, HyperOS, LineageOS)'
        required: true
      EXTRACT_PATH:
        description: 'Folder or file to extract (e.g. vendor/lib/modules, system/app/Settings.apk, etc.)'
        required: true
      OUTPUT_ZIP_NAME:
        description: 'Output zip name (without .zip)'
        default: 'rom_extract'

jobs:
  dump:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip zip p7zip-full aria2 lz4 tar python3 python3-pip brotli simg2img mount fuse-overlayfs
          pip install protobuf bsdiff4
          echo "‚úÖ Environment ready."

      - name: Download ROM
        run: |
          echo "üì• Downloading ROM from ${{ inputs.ROM_URL }}"
          mkdir -p rom
          cd rom
          aria2c -x16 -s16 -k1M "${{ inputs.ROM_URL }}" -o rom.zip
          echo "‚úÖ Download complete"
          ls -lh

      - name: Extract ROM archive
        run: |
          cd rom
          FILE=$(ls)
          mkdir -p extracted
          echo "üì¶ Extracting ROM: $FILE"

          if [[ "$FILE" == *.zip ]]; then
            unzip -q "$FILE" -d extracted/
          elif [[ "$FILE" == *.tgz ]]; then
            tar -xzf "$FILE" -C extracted/
          elif [[ "$FILE" == *.tar.gz ]]; then
            tar -xzf "$FILE" -C extracted/
          elif [[ "$FILE" == *.7z ]]; then
            7z x "$FILE" -oextracted/
          else
            echo "‚ùå Unsupported format: $FILE"
            exit 1
          fi

          echo "‚úÖ Extraction finished."
          ls extracted

      - name: Extract payload.bin (if exists)
        run: |
          cd rom/extracted
          if [ -f "payload.bin" ]; then
            echo "üì¶ payload.bin detected ‚Äî extracting partitions..."
            git clone --depth=1 https://github.com/ssut/payload-dumper-go ../payload-dumper
            cd ../payload-dumper
            go build
            ./payload-dumper-go ../extracted/payload.bin --out ../images
            cd ..
            echo "‚úÖ payload.bin extraction complete. Extracted images:"
            ls images
          else
            echo "‚ÑπÔ∏è No payload.bin found, skipping payload extraction."
          fi

      - name: Extract requested path (auto-detect partition)
        run: |
          cd rom
          TARGET="${{ inputs.EXTRACT_PATH }}"
          mkdir -p extract_target

          # Automatically detect the partition based on path prefix
          PART=$(echo "$TARGET" | cut -d'/' -f1)
          REL_PATH=$(echo "$TARGET" | cut -d'/' -f2-)
          echo "üîç Requested extraction: $TARGET"
          echo "üß© Base partition: $PART"
          echo "üìÅ Relative path: $REL_PATH"

          if [ -f "images/${PART}.img" ]; then
            echo "üß© Found ${PART}.img ‚Äî extracting..."
            mkdir -p mount_${PART}
            file images/${PART}.img | grep -q "sparse" && simg2img images/${PART}.img ${PART}_raw.img && mv ${PART}_raw.img images/${PART}.img

            sudo mount -o loop images/${PART}.img mount_${PART} || true

            if [ -d "mount_${PART}/$REL_PATH" ]; then
              echo "üìÇ Copying full directory: $REL_PATH"
              mkdir -p extract_target/$(dirname "$REL_PATH")
              cp -a "mount_${PART}/$REL_PATH" extract_target/"$REL_PATH"
            elif [ -f "mount_${PART}/$REL_PATH" ]; then
              echo "üìÑ Copying single file: $REL_PATH"
              mkdir -p extract_target/$(dirname "$REL_PATH")
              cp -a "mount_${PART}/$REL_PATH" extract_target/"$REL_PATH"
            else
              echo "‚ùå Path not found: $REL_PATH"
              echo "Available top-level directories in ${PART}.img:"
              ls mount_${PART}
              exit 1
            fi

            sudo umount mount_${PART} || true
            echo "‚úÖ Extraction complete: $TARGET"
          else
            echo "‚ùå Partition image not found for ${PART}.img"
            exit 1
          fi

      - name: Compress extracted path
        run: |
          cd rom
          zip -r "../${{ inputs.OUTPUT_ZIP_NAME }}.zip" extract_target/
          echo "‚úÖ Compressed extracted content: ${{ inputs.OUTPUT_ZIP_NAME }}.zip"
          ls -lh ../${{ inputs.OUTPUT_ZIP_NAME }}.zip

      - name: Upload extracted path as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.ROM_TYPE }}-${{ inputs.EXTRACT_PATH }}-extract
          path: ${{ inputs.OUTPUT_ZIP_NAME }}.zip
          retention-days: 7
          
